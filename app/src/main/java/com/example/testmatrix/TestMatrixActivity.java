package com.example.testmatrix;


import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.util.Log;


public class TestMatrixActivity extends Activity {

    private static final String TAG = "TestMatrixActivity";
    static EditText mConvertText;
    static EditText mInputText;
    String TestString1 = "中英文";
    String TestString = "中英文";//efg;hijk;lmn";
    //test2sfsaftest2sfsafsadfwerqwerqtgregeeeq3564safsgasdgwefdsgsgwefgw" +
    //"egwegwsasdfgfhgjykuykureqwerwerwqerwefdsfdsgsdsdafwerqteqtreyreyhrrytjyt58sadfwerqwer" +
    //"qtgregeeeq3564safsgasdgwefdsgsgwefgwegwegwsasdfgfhgjykuykureqwerwerwqerwefdsfdsgsdsdaf" +
    //"werqteqtreyreyhrrytjyt58werqteqtreyreyhrrytjyt58";
    char logo_bmp_128x64[] =
            {
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0x87,0x07,0x03,0x03,0x1B,0xDB,0xC3,0x03,0x03,0x1B,0xFB,0xF3,0x37,0x37,
                    0x37,0xAF,0xAF,0xDF,0xDF,0x3F,0x7F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xBF,0xBF,0x9F,0x9F,0x2F,0x2F,0x77,
                    0x77,0xF7,0x37,0x07,0x07,0x87,0xC7,0x37,0x27,0x07,0x07,0x0F,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFE,0xF0,0xC0,0x00,0x07,0xB6,0xB0,0x80,0x00,0x00,0x00,0x04,0x36,
                    0xF7,0xB4,0x25,0x81,0x03,0x81,0xE1,0xF3,0x77,0x35,0x31,0x2B,0x17,0x0F,0x9F,0x9F,
                    0x3F,0xFF,0xFF,0xFF,0xFF,0x9F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xCF,0xEF,0xFF,0xFF,0xFF,0x7F,0x3F,0x1F,
                    0x1F,0x0F,0x17,0x03,0x21,0x77,0xF2,0xE0,0xE1,0x03,0x03,0x03,0x29,0x6C,0x6C,0x64,
                    0x08,0x01,0x01,0x00,0xA0,0xF6,0x7E,0x00,0x00,0xC0,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x01,0x1B,0xF8,0xC0,0x00,0x00,0x00,0x00,
                    0x03,0x17,0x1F,0xFB,0xCB,0xCB,0x48,0x49,0x60,0x60,0x2C,0x8C,0x9E,0x9F,0x0F,0x07,
                    0x43,0x00,0x00,0x01,0x03,0x47,0x5F,0x1C,0xBB,0x77,0xFF,0xEF,0x9F,0xFF,0xFF,0x7F,
                    0xFF,0xFF,0xFF,0xBF,0xEF,0xFF,0x7B,0x1E,0x0F,0x57,0x03,0x01,0x00,0x00,0x03,0x07,
                    0x0F,0x0F,0x9E,0x1C,0x28,0x60,0x48,0xD9,0xC8,0xDB,0xDB,0xDB,0x1B,0x03,0x00,0x00,
                    0x00,0x00,0x00,0xB9,0x3B,0x02,0x00,0xC0,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0xF8,0xE0,0xCD,0xDC,0xC0,0x80,0xC0,
                    0x80,0x80,0x80,0x91,0xBA,0x7E,0x7F,0xBF,0xFF,0xFF,0xFF,0xE7,0xE7,0xE7,0xC1,0xC0,
                    0xC0,0xC8,0xC2,0x80,0x84,0x80,0x80,0x80,0x00,0x00,0x02,0x81,0x01,0x0C,0x00,0x00,
                    0x00,0x01,0x3F,0x43,0x05,0x02,0x00,0x80,0x80,0x82,0x80,0x84,0x84,0x80,0x80,0x80,
                    0xC1,0xEF,0xE7,0xE7,0xEF,0xEE,0xEF,0xBF,0x7E,0xBE,0xB2,0x83,0x80,0x80,0x80,0x80,
                    0x80,0xC0,0xD8,0xE7,0xF0,0xF8,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x9F,0x1F,0x3F,
                    0xEF,0xC1,0x80,0x0E,0x00,0x00,0x02,0xCD,0xFF,0xFF,0xFF,0x3F,0x1F,0xCF,0xEF,0xF7,
                    0xFF,0xFF,0xFF,0x7F,0x3F,0x1F,0x1F,0x0F,0x83,0xC0,0xE0,0xF0,0xF8,0x00,0x00,0x00,
                    0x00,0x00,0xFC,0xF0,0xE0,0xC1,0x82,0x07,0x0F,0x1F,0x3F,0x7F,0xFF,0xFF,0xFB,0xF3,
                    0xEF,0xFF,0xDF,0x1F,0x3F,0xFF,0xFF,0xFF,0x88,0x20,0x00,0x0E,0x02,0xC1,0xFB,0x5F,
                    0x1F,0x3F,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xE7,0xE3,0xC8,
                    0x38,0xB9,0x80,0x80,0x01,0x00,0x10,0x00,0x07,0x0F,0x7E,0xFC,0xF8,0xFF,0xFD,0x7F,
                    0x9F,0xE2,0xF0,0x00,0x80,0xF0,0xF8,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0xE0,
                    0xC0,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0xF8,0xE0,0x00,0x0C,0xF1,0x87,0x3D,
                    0xFD,0xFF,0x79,0x7C,0x7E,0x7F,0x0F,0x07,0x00,0x00,0x03,0x80,0x80,0xB1,0x38,0x98,
                    0xC7,0xE7,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7C,
                    0x3C,0x1D,0x21,0x27,0xB3,0x30,0x30,0x40,0x41,0xC0,0x80,0x00,0x02,0xE6,0x90,0x0B,
                    0x0B,0x1B,0x17,0xC6,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEC,0x87,0x13,0x0B,0x0A,
                    0x1A,0x90,0xC2,0x02,0x80,0x80,0xC0,0x41,0x30,0x30,0xB1,0xB7,0xA3,0x09,0x3C,0x3C,
                    0x7D,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x8F,0x87,0xC3,0xE0,0xF8,
                    0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0xF9,0xFD,0xF0,0xF3,0xFF,0xFF,
                    0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFB,0xF0,0xF9,0xF8,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,
                    0xFC,0xF0,0x83,0x8F,0xDF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
            };

    private TestMatrixScreen TestMatrix;

    private Handler mTimerHandler = new Handler();


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mConvertText = (EditText) findViewById(R.id.ConvertText);
        mInputText = (EditText) findViewById(R.id.EditTextInput);
        mInputText.requestFocus();

        final Button buttonSetup = (Button)findViewById(R.id.ButtonConvert);
        buttonSetup.setOnClickListener(ConvertBtnListener);

        final Button buttonStart = (Button)findViewById(R.id.ButtonStart);
        buttonStart.setOnClickListener(StartBtnListener);

        final Button buttonStop = (Button)findViewById(R.id.ButtonStop);
        buttonStop.setOnClickListener(StopBtnListener);

        TestMatrix = new TestMatrixScreen();

        mTimerHandler.postDelayed(runnableStart, 50000);
        //mConvertText.setText("");

        TestMatrix.MatrixScreenShowOneScreen(logo_bmp_128x64);
		/*
		String tomatrix = utf8Togb2312(TestString1);
		Log.w(TAG, "tomatrix="+tomatrix);
		tomatrix = "32" + tomatrix;
		TestMatrix.matrix_screen_show_groupname(tomatrix);

		split_string(TestString1,TestString);
		*/
        Log.w(TAG, "onCreate");
    }
    private void split_string(String name, String list)
    {

        String name_list = null;
        String[] strarray=list.split(";");
        int index = 0;

        for (int i = 0; i < strarray.length; i++){
            Log.d(TAG, "String strarray =" + strarray[i]);
            if(name.equals(strarray[i])){
                index = i;
            }
        }

        if(strarray.length == 1){
            name_list = "31";
            TestMatrix.matrix_screen_show_groupname(name_list);
            name_list = "32" + utf8Togb2312(strarray[index]);
            TestMatrix.matrix_screen_show_groupname(name_list);
            name_list = "33";
            TestMatrix.matrix_screen_show_groupname(name_list);
        }
        else if(strarray.length == 2){
            if(index == 1)
                name_list = "31" + utf8Togb2312(strarray[0]);
            else
                name_list = "31" + utf8Togb2312(strarray[1]);

            TestMatrix.matrix_screen_show_groupname(name_list);

            name_list = "32" + utf8Togb2312(strarray[index]);
            TestMatrix.matrix_screen_show_groupname(name_list);

            name_list = "33";
            TestMatrix.matrix_screen_show_groupname(name_list);
        }
        else if(strarray.length > 2){
            if(index == (strarray.length - 1))
                name_list = "31" + utf8Togb2312(strarray[0]);
            else
                name_list = "31" + utf8Togb2312(strarray[index+1]);

            TestMatrix.matrix_screen_show_groupname(name_list);

            name_list = "32" + utf8Togb2312(strarray[index]);
            TestMatrix.matrix_screen_show_groupname(name_list);

            if(index == 0)
                name_list = "33" + utf8Togb2312(strarray[strarray.length-1]);
            else
                name_list = "33" + utf8Togb2312(strarray[index -1]);

            TestMatrix.matrix_screen_show_groupname(name_list);
        }

    }

    private String utf8Togb2312(String str){

        String utf8 = null;
        String gbk = null;
        String unicode = null;
        StringBuffer result = new StringBuffer();
        String out = null;

        try {
            utf8 = new String(str.getBytes( "UTF-8"));
            Log.w(TAG, "String utf8 =" + utf8);
            unicode = new String(utf8.getBytes(),"UTF-8");
            Log.w(TAG, "String unicode =" + unicode);
            gbk = new String(unicode.getBytes("GBK"));
            Log.w(TAG, "String gbk =" + gbk);

        }
        catch(Exception e){}

        try {
            byte[] bytes = unicode.getBytes("gb2312");
            int length = unicode.getBytes("gb2312").length;

            if (mConvertText != null) {
                Log.w(TAG, "length="+length);
                for(int i=0; i<length; i++){
                    Log.w(TAG, "bytes["+i+"]="+bytes[i]);
                    //int data = (buffer[i] >= 0) ? buffer[i] : (256+buffer[i]);
                    String hex = Integer.toHexString(bytes[i] & 0xFF);
                    if (hex.length() == 1) {
                        hex = "0" + hex;
                    }
                    mConvertText.append(hex);
                    result.append(hex.toUpperCase());

                }
            }
        } catch (Exception e) {}

        out = result.toString();
        Log.w(TAG, "result.toString()="+out);

        return out;
    }


    private View.OnClickListener ConvertBtnListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {

            String ConvertString = null;
            CharSequence editText = mInputText.getText();

            if(editText == null || editText.length() == 0){
                ConvertString = TestString;
            }
            else{
                ConvertString = editText.toString();
            }

            mConvertText.setText("");
            String tomatrix = utf8Togb2312(ConvertString);
            Log.w(TAG, "tomatrix="+tomatrix);

            TestMatrix.matrix_screen_show_groupname("31" + tomatrix);
        }
    };

    Runnable runnableStart = new Runnable() {
        @Override
        public void run() {
            Log.w(TAG ,"com.ptt.noscreen.action.ext.ptt_talk" + " ,talk_state = "+ "start_talk");
            sendBroadcast(new Intent("com.ptt.noscreen.action.ext.ptt_talk").putExtra("talk_state", "start_talk"));
            mTimerHandler.postDelayed(runnableStop, 10000);
        }
    };

    Runnable runnableStop = new Runnable() {
        @Override
        public void run() {
            Log.w(TAG ,"com.ptt.noscreen.action.ext.ptt_talk" + " ,talk_state = "+ "stop_talk");
            sendBroadcast(new Intent("com.ptt.noscreen.action.ext.ptt_talk").putExtra("talk_state", "stop_talk"));
            mTimerHandler.postDelayed(runnableStart, 40000);
        }
    };

    private View.OnClickListener StartBtnListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Log.w(TAG ,"com.ptt.noscreen.action.ext.ptt_talk" + " ,talk_state = "+ "start_talk");
            sendBroadcast(new Intent("com.ptt.noscreen.action.ext.ptt_talk").putExtra("talk_state", "stop_talk"));

        }
    };

    private View.OnClickListener StopBtnListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Log.w(TAG ,"com.ptt.noscreen.action.ext.ptt_talk" + " ,talk_state = "+ "start_talk");
            sendBroadcast(new Intent("com.ptt.noscreen.action.ext.ptt_talk").putExtra("talk_state", "stop_talk"));


        }
    };
}

